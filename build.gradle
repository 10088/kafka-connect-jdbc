buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        //classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

String junit = '4.12'
String guavaVersion = '19.0'
String confluentVersion = '2.0.1'
String kafkaVersion = '0.9.0.1'
String mockitoVersion = '1.10.19'
String jacksonDatabind = '2.7.0'
String avroVersion = '1.8.0'
String jacksonxmlVersion = '2.6.5'

allprojects {
    version = '0.1'
    group = 'com.datamountaineer.streamreactor'
    apply plugin: 'java'
    //apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "maven-publish"
    apply plugin: 'distribution'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7


    distributions {
        main {}
    }

    repositories {
        mavenCentral()
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
    }

    dependencies {
        compile "com.google.guava:guava:$guavaVersion"
        compile "org.apache.kafka:connect-api:$kafkaVersion"
        compile "org.apache.kafka:connect-json:$kafkaVersion"
        compile("io.confluent:kafka-connect-avro-converter:$confluentVersion") {
            exclude group: "org.jboss.netty", module: "netty"
        }

        compile "com.fasterxml.jackson.core:jackson-core:$jacksonxmlVersion"

        testCompile "junit:junit:$junit"

        testCompile ("org.mockito:mockito-all:$mockitoVersion"){
           // exclude group: "org.hamcrest", module:"hamcrest-core"
        }
        testRuntime 'org.pegdown:pegdown:1.1.0'
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    task compile(dependsOn: 'compileJava')

    task fatJar(dependsOn: ['test', 'shadowJar'])
    task fatJarNoTest(dependsOn: 'shadowJar')

    shadowJar {
        transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
            resource = 'reference.conf'
        }

    }

    //version = project.hasProperty('version.number') ? project.getProperty('version.number') : "0.0.0"

    println "Building ${name}-${version}"

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}


project(":kafka-connect-common") {
    dependencies {
        //compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }
}

project(":kafka-connect-jdbc-sink") {
    dependencies {
        compile project(':kafka-connect-common')
        compile 'com.zaxxer:HikariCP:2.4.5'

        testCompile 'org.xerial:sqlite-jdbc:3.8.11.2'
    }
}
